// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: internal/app/handlers/grpc_handler.proto

package handlers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GRPCHandler_CreateURL_FullMethodName = "/handlers.GRPCHandler/CreateURL"
)

// GRPCHandlerClient is the client API for GRPCHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCHandlerClient interface {
	CreateURL(ctx context.Context, in *CreateURLRequest, opts ...grpc.CallOption) (*CreateURLResponse, error)
}

type gRPCHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCHandlerClient(cc grpc.ClientConnInterface) GRPCHandlerClient {
	return &gRPCHandlerClient{cc}
}

func (c *gRPCHandlerClient) CreateURL(ctx context.Context, in *CreateURLRequest, opts ...grpc.CallOption) (*CreateURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateURLResponse)
	err := c.cc.Invoke(ctx, GRPCHandler_CreateURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCHandlerServer is the server API for GRPCHandler service.
// All implementations must embed UnimplementedGRPCHandlerServer
// for forward compatibility
type GRPCHandlerServer interface {
	CreateURL(context.Context, *CreateURLRequest) (*CreateURLResponse, error)
	mustEmbedUnimplementedGRPCHandlerServer()
}

// UnimplementedGRPCHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCHandlerServer struct {
}

func (UnimplementedGRPCHandlerServer) CreateURL(context.Context, *CreateURLRequest) (*CreateURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateURL not implemented")
}
func (UnimplementedGRPCHandlerServer) mustEmbedUnimplementedGRPCHandlerServer() {}

// UnsafeGRPCHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCHandlerServer will
// result in compilation errors.
type UnsafeGRPCHandlerServer interface {
	mustEmbedUnimplementedGRPCHandlerServer()
}

func RegisterGRPCHandlerServer(s grpc.ServiceRegistrar, srv GRPCHandlerServer) {
	s.RegisterService(&GRPCHandler_ServiceDesc, srv)
}

func _GRPCHandler_CreateURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCHandlerServer).CreateURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCHandler_CreateURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCHandlerServer).CreateURL(ctx, req.(*CreateURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCHandler_ServiceDesc is the grpc.ServiceDesc for GRPCHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "handlers.GRPCHandler",
	HandlerType: (*GRPCHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateURL",
			Handler:    _GRPCHandler_CreateURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/app/handlers/grpc_handler.proto",
}
